#!/bin/bash 


function did_it_work {
    code=$1
    #echo "did: "$code
    if [ ! $code = 0 ]
    then
        echo "Error failure: code $code "
        exit 1
    fi
}

function start_server {
    scripts/start_server.bsh 
    did_it_work $?

    make clean_all
    # No check.
}


function start_one_test {
    CWD=`pwd`

    if [ ! -d $1 ]
    then
        echo "Fail no valid dir: "$1
        exit 1
    fi

    test=`echo $1 | tr -d '/'`
    #Run one test
    log=$CWD/log.$test.txt
    run_test $test $log
}

function start_all_tests {
    CWD=`pwd`

    for f in $( ls -1 -d test* );
    do
        log=$CWD/log.$f.txt
        run_test $f $log
    done
}

function start_error_tests {
    CWD=`pwd`

    for f in $( ls -1 -d error* );
    do
        log=$CWD/log.$f.txt
        run_test $f $log
    done
}


function run_test {
    tes=$1
    log=$2

    echo "Begin test: $tes ( $log )"

    make flash TEST=$tes
    did_it_work $?

    #sleep 3

    if [ ! -f main.elf ]; then
        echo "Missing main.elf"
        exit 1
    fi

    arm-none-eabi-gdb \
        --eval-command="set logging on" \
        --batch --command=res/commands.gdb \
        main.elf
    #scripts/gdb_runner.pl main.elf $log
    did_it_work $?

    mv gdb.txt $log

    #extract print ring and attach it to the log.
    ./print_ring/getLogg.pl main.elf printlog.txt
    did_it_work $?

    echo "" >> $log
    cat printlog.txt >> $log
    rm printlog.txt

    make clean
    did_it_work $?

    sleep 1

    echo "End test: $f"
    echo ""
}

function usage {
    echo "Usage:"
    #echo $0"        - run all tests"
    #echo $0" test03 - run test03 aka test03/test03.c"

    # getopt
    echo $0" -a        - all tests, default"
    echo $0" -c        - cleanup"
    echo $0" -e        - error tests"
    echo $0" -t test03 - run one test, i.e. test03 aka test03/test03.c"
}



# Do not allow "no args"
if [ -z $* ]
then
    usage
    exit 1
fi

#
# Use getopt to check the args
# http://aplawrence.com/Unix/getopts.html
#
args=`getopt aceht: $*`
if test $? != 0
then
    usage
    exit 1
fi
set -- $args
for i
do
    case "$i" in
        -a) shift;echo "Run all tests"  ;start_server;start_all_tests;;
        -e) shift;echo "Run error tests";start_server;start_error_tests;;
        -t) shift;echo "Run test: $1"   ;start_server;start_one_test $1;shift;;
        -c) shift;echo "Cleanup...";make clean_all;exit 0;;
        -h) shift                  ;usage         ;exit 0;;
    esac
done




#source ~/stm32/bin/stm32_setup.sh 
#did_it_work $?


echo 
echo "Results:"
echo " OK:   "`grep test_success    log.*.txt | grep Breakpoint | wc -l`
echo " FAIL  "`grep test_failed     log.*.txt | grep Breakpoint | wc -l`
echo " Err   "`grep Default_Handler log.*.txt | grep Breakpoint | wc -l`
#echo " Err   "`grep 'signal SIGTRAP' log.*.txt | wc -l`
echo 

for f in $( ls -1 log.*.txt );
do
    if [ "`grep test_success $f | grep Breakpoint | wc -l`" = "1" ]
    then 
        echo $f" - OK"
    fi

    if [ "`grep test_failed $f | grep Breakpoint | wc -l`" = "1" ]
    then 
        echo $f" - FAIL"
    fi

    if [ "`grep Default_Handler $f | grep Breakpoint | wc -l`" = "1" ]
    then 
        echo $f" - Error"
    fi

done


exit 0;


# kill `ps -A | grep openocd | awk '{print $1}'`

